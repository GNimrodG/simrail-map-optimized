// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SMOBackend.Data;

#nullable disable

namespace SMOBackend.Migrations
{
    [DbContext(typeof(SmoContext))]
    [Migration("20250512180835_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SMOBackend.Models.Entity.RoutePoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Point>("Point")
                        .IsRequired()
                        .HasColumnType("Geometry(Point, 4326)")
                        .HasColumnName("point");

                    b.Property<string>("RouteId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("route_id");

                    b.Property<string>("RunId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("run_id");

                    b.Property<string>("TrainId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("train_id");

                    b.HasKey("Id")
                        .HasName("pk_route_points");

                    b.HasIndex("Point")
                        .HasDatabaseName("ix_route_points_point");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Point"), "gist");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_route_points_route_id");

                    b.HasIndex("RouteId", "RunId", "TrainId")
                        .HasDatabaseName("ix_route_points_route_id_run_id_train_id");

                    b.ToTable("route_points", (string)null);
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.Signal", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("name");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("accuracy");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<string>("Extra")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("extra");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("Geometry(Point, 4326)")
                        .HasColumnName("location");

                    b.Property<bool>("NextFinalized")
                        .HasColumnType("boolean")
                        .HasColumnName("next_finalized");

                    b.Property<string>("NextRegex")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("next_regex");

                    b.Property<bool>("PrevFinalized")
                        .HasColumnType("boolean")
                        .HasColumnName("prev_finalized");

                    b.Property<string>("PrevRegex")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("prev_regex");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Name")
                        .HasName("pk_signals");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_signals_location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "gist");

                    b.ToTable("signals", (string)null);
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.SignalConnection", b =>
                {
                    b.Property<string>("Prev")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("prev");

                    b.Property<string>("Next")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("next");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<double>("Distance")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("distance");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<short?>("VMAX")
                        .HasColumnType("smallint")
                        .HasColumnName("vmax");

                    b.HasKey("Prev", "Next")
                        .HasName("pk_signal_connections");

                    b.HasIndex("Next")
                        .HasDatabaseName("ix_signal_connections_next");

                    b.HasIndex("Prev")
                        .HasDatabaseName("ix_signal_connections_prev");

                    b.ToTable("signal_connections", null, t =>
                        {
                            t.HasCheckConstraint("ck_signal_connections_prev_next_not_same", "prev <> next");
                        });
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.SignalConnectionError", b =>
                {
                    b.Property<string>("Prev")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("prev");

                    b.Property<string>("Next")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("next");

                    b.Property<string>("Error")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error");

                    b.Property<bool>("Checked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("checked");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<double>("Distance")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("distance");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<short>("VMAX")
                        .HasColumnType("smallint")
                        .HasColumnName("vmax");

                    b.HasKey("Prev", "Next", "Error")
                        .HasName("pk_signal_connection_errors");

                    b.ToTable("signal_connection_errors", (string)null);
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.Stat", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int?>("ServerCount")
                        .HasColumnType("integer")
                        .HasColumnName("server_count");

                    b.HasKey("ServiceId", "CreatedAt")
                        .HasName("pk_stats");

                    b.ToTable("stats", (string)null);
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.SignalConnection", b =>
                {
                    b.HasOne("SMOBackend.Models.Entity.Signal", "NextSignal")
                        .WithMany("PrevSignalConnections")
                        .HasForeignKey("Next")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signal_connections_signals_next");

                    b.HasOne("SMOBackend.Models.Entity.Signal", "PrevSignal")
                        .WithMany("NextSignalConnections")
                        .HasForeignKey("Prev")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_signal_connections_signals_prev");

                    b.Navigation("NextSignal");

                    b.Navigation("PrevSignal");
                });

            modelBuilder.Entity("SMOBackend.Models.Entity.Signal", b =>
                {
                    b.Navigation("NextSignalConnections");

                    b.Navigation("PrevSignalConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
